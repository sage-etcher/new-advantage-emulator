

TYPE_DEBUG   = debug
TYPE_RELEASE = release
# set default type
#BUILD_TYPE = $(TYPE_RELEASE)
BUILD_TYPE = $(TYPE_DEBUG)

# if DEBUG is defined set BUILD_TYPE to TYPE_DEBUG
ifdef DEBUG
BUILD_TYPE = $(TYPE_DEBUG)
endif

# system
SRC_PATH    = ./src
EXTERN_PATH = ./external

# z80emu
#Z80EMU_PATH    := $(EXTERN_PATH)/z80emu
#Z80EMU_INCLUDE := -I$(Z80EMU_PATH)
#Z80EMU_FILES    = z80emu.c
#Z80EMU_SRCS    := $(addprefix $(Z80EMU_PATH)/,$(Z80EMU_FILES))
#Z80EMU_OBJS    := $(addprefix $(BUILD_PATH)/,$(addsuffix .o,$(Z80EMU_FILES)))

# advantage emulator
ADV_TARGET   = a.out
ADV_PATH    := $(SRC_PATH)
ADV_INCLUDE := -I$(ADV_PATH)
ADV_FILES    = crt.c \
               emu.c \
               mmu.c \
               mobo.c \
               raw_memory.c \
               test.c \
               timer.c \
               z80.c
ADV_SRCS    := $(addprefix $(ADV_PATH)/,$(ADV_FILES))
ADV_OBJS    := $(addsuffix .o,$(ADV_FILES))

# global build configs
DEBUG_CFLAGS = -O0
DEBUG_LFLAGS = -g

RELEASE_CFLAGS = -O2
RELEASE_LFLAGS = -s

C11THREADS_CFLAGS =
C11THREADS_LFLAGS = -lstdthreads


CC = cc
WARN  = -Wall
WARN += -std=c11
WARN += -Wextra
WARN += -Wpedantic -pedantic-errors
WARN += -Waggregate-return \
		-Wbad-function-cast \
		-Wcast-align \
		-Wcast-qual \
		-Wdeclaration-after-statement \
		-Wmissing-declarations \
		-Wmissing-include-dirs \
		-Wmissing-prototypes \
		-Wnested-externs \
		-Wpointer-arith \
		-Wpointer-to-int-cast \
		-Wint-to-pointer-cast \
		-Wredundant-decls \
		-Wsequence-point \
		-Wshadow \
		-Wstrict-prototypes \
		-Wswitch \
		-Wundef \
		-Wunreachable-code \
		-Wunused-but-set-parameter \
		-Wwrite-strings \
		-fstack-protector
CFLAGS := $(C11THREADS_CFLAGS) $(WARN)

LD = cc
LFLAGS = $(C11THREADS_LFLAGS)

# BUILD_TYPE compile/linker flags
# append debug flags
ifeq ("$(BUILD_TYPE)", "$(TYPE_DEBUG)")
CFLAGS += $(DEBUG_CFLAGS)
LFLAGS += $(DEBUG_LFLAGS)
endif 

# append release flags
ifeq ("$(BUILD_TYPE)", "$(TYPE_RELEASE)")
CFLAGS += $(RELEASE_CFLAGS)
LFLAGS += $(RELEASE_LFLAGS)
endif


# names
build: $(ADV_TARGET)

clean:
	rm -f $(ADV_TARGET)
	rm -f $(ADV_OBJS)

depends: depends.mk

depends.mk:
	@echo "" > $@
	$(CC) -MM -MJ $(ADV_SRCS) $(CFLAGS) $(ADV_INCLUDES) >> $@
#	$(CC) -MM -MJ $(Z80EMU_SRCS) $(CFLAGS) $(Z80EMU_INCLUDES) >> $@

bear: clean
	bear --force-wrapper -- $(MAKE) build

bearclean:
	rm -f compile_commands.json


fullclean: bearclean clean

debug:
	@echo "BUILD_TYPE: $(BUILD_TYPE)"
	@echo "CFLAGS: $(CFLAGS)"
	@echo "LFLAGS: $(LFLAGS)"
	@echo "ADV_TARGET: $(ADV_TARGET)"
	@echo "ADV_SRCS:   $(ADV_SRCS)"
	@echo "ADV_OBJS:   $(ADV_OBJS)"
#	@echo "Z80EMU_SRCS: $(Z80EMU_SRCS)"
#	@echo "Z80EMU_OBJS: $(Z80EMU_OBJS)"

# target
$(ADV_TARGET): $(ADV_OBJS)
	@mkdir -p $(dir $@)
	$(LD) -o $@ $(ADV_OBJS) $(LFLAGS)

# generic
$(ADV_OBJS): $(ADV_SRCS)
	@mkdir -p $(dir $@)
	$(CC) -c -o $@ $< $(CFLAGS) $(ADV_INCLUDES)

#$(Z80EMU_OBJS): $(Z80EMU_SRCS)
#	@mkdir -p $(dir $@)
#	$(CC) -c -o $@ $< $(CFLAGS) $(Z80EMU_INCLUDES)

# vim: noet
# end of file
